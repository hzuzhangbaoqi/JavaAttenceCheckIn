<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.attencecheckin.javabackend.dao.SignInMapper">
  <resultMap id="BaseResultMap" type="com.attencecheckin.javabackend.entity.SignIn">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="studentId" jdbcType="INTEGER" property="studentid" />
    <result column="signTime" jdbcType="TIMESTAMP" property="signtime" />
    <result column="status" jdbcType="INTEGER" property="status" />
    <result column="courseId" jdbcType="INTEGER" property="courseid" />
    <result column="susLocationStatus" jdbcType="INTEGER" property="suslocationstatus" />
    <result column="susLocation" jdbcType="VARCHAR" property="suslocation" />
    <result column="signtype" jdbcType="INTEGER" property="signtype" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, studentId, signTime, status, courseId, susLocationStatus, susLocation, signtype
  </sql>
  <select id="selectByExample" parameterType="com.attencecheckin.javabackend.entity.SignInExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'true' as QUERYID,
    <include refid="Base_Column_List" />
    from signin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from signin
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from signin
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <delete id="deleteByExample" parameterType="com.attencecheckin.javabackend.entity.SignInExample">
    delete from signin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.attencecheckin.javabackend.entity.SignIn">
    insert into signin (id, studentId, signTime, 
      status, courseId, susLocationStatus, 
      susLocation, signtype)
    values (#{id,jdbcType=INTEGER}, #{studentid,jdbcType=INTEGER}, #{signtime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=INTEGER}, #{courseid,jdbcType=INTEGER}, #{suslocationstatus,jdbcType=INTEGER}, 
      #{suslocation,jdbcType=VARCHAR}, #{signtype,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="com.attencecheckin.javabackend.entity.SignIn">
    insert into signin
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="studentid != null">
        studentId,
      </if>
      <if test="signtime != null">
        signTime,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="courseid != null">
        courseId,
      </if>
      <if test="suslocationstatus != null">
        susLocationStatus,
      </if>
      <if test="suslocation != null">
        susLocation,
      </if>
      <if test="signtype != null">
        signtype,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="studentid != null">
        #{studentid,jdbcType=INTEGER},
      </if>
      <if test="signtime != null">
        #{signtime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=INTEGER},
      </if>
      <if test="courseid != null">
        #{courseid,jdbcType=INTEGER},
      </if>
      <if test="suslocationstatus != null">
        #{suslocationstatus,jdbcType=INTEGER},
      </if>
      <if test="suslocation != null">
        #{suslocation,jdbcType=VARCHAR},
      </if>
      <if test="signtype != null">
        #{signtype,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.attencecheckin.javabackend.entity.SignInExample" resultType="java.lang.Integer">
    select count(*) from signin
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update signin
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=INTEGER},
      </if>
      <if test="record.studentid != null">
        studentId = #{record.studentid,jdbcType=INTEGER},
      </if>
      <if test="record.signtime != null">
        signTime = #{record.signtime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=INTEGER},
      </if>
      <if test="record.courseid != null">
        courseId = #{record.courseid,jdbcType=INTEGER},
      </if>
      <if test="record.suslocationstatus != null">
        susLocationStatus = #{record.suslocationstatus,jdbcType=INTEGER},
      </if>
      <if test="record.suslocation != null">
        susLocation = #{record.suslocation,jdbcType=VARCHAR},
      </if>
      <if test="record.signtype != null">
        signtype = #{record.signtype,jdbcType=INTEGER},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update signin
    set id = #{record.id,jdbcType=INTEGER},
      studentId = #{record.studentid,jdbcType=INTEGER},
      signTime = #{record.signtime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=INTEGER},
      courseId = #{record.courseid,jdbcType=INTEGER},
      susLocationStatus = #{record.suslocationstatus,jdbcType=INTEGER},
      susLocation = #{record.suslocation,jdbcType=VARCHAR},
      signtype = #{record.signtype,jdbcType=INTEGER}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.attencecheckin.javabackend.entity.SignIn">
    update signin
    <set>
      <if test="studentid != null">
        studentId = #{studentid,jdbcType=INTEGER},
      </if>
      <if test="signtime != null">
        signTime = #{signtime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=INTEGER},
      </if>
      <if test="courseid != null">
        courseId = #{courseid,jdbcType=INTEGER},
      </if>
      <if test="suslocationstatus != null">
        susLocationStatus = #{suslocationstatus,jdbcType=INTEGER},
      </if>
      <if test="suslocation != null">
        susLocation = #{suslocation,jdbcType=VARCHAR},
      </if>
      <if test="signtype != null">
        signtype = #{signtype,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.attencecheckin.javabackend.entity.SignIn">
    update signin
    set studentId = #{studentid,jdbcType=INTEGER},
      signTime = #{signtime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=INTEGER},
      courseId = #{courseid,jdbcType=INTEGER},
      susLocationStatus = #{suslocationstatus,jdbcType=INTEGER},
      susLocation = #{suslocation,jdbcType=VARCHAR},
      signtype = #{signtype,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
    
    <select id="showSignin" resultMap="BaseResultMap">
        select * from signin where courseid=#{courseid} and DATE_FORMAT(signtime,'%Y-%m-%d')=#{time} and signtype=#{signtype} order by status desc
    </select>


  <select id="getAttendanceStatistics" resultType="map">
      select studentid,status,username,count(1) 'count'  FROM signin si LEFT JOIN student s on si.studentid = s.id where si.signtype = 1
      <if test="studentid!=null">si.studentid = #{studentid}</if>
      <if test="signtimeStart!=null and signtimeStart!=''">and si.signTime <![CDATA[ >= ]]> str_to_date(#{signtimeStart}, '%Y-%m-%d %H:%i:%s')</if>
      <if test="signtimeEnd!=null and signtimeEnd!=''">and si.signTime <![CDATA[ < ]]> str_to_date(#{signtimeEnd}, '%Y-%m-%d %H:%i:%s')</if>
      group by si.studentid,si.status
  </select>
  <select id="getAbnormal" resultType="map">
    select s.id, s.studentid,  DATE_FORMAT(s.signtime,'%Y-%m-%d %H:%i:%s') signtime, s.status, s.courseid, s.suslocationstatus, s.suslocation, s.signtype,c.coursename from signin s,course c
    where s.courseid = c.id
    and studentId in
    <foreach close=")" collection="studentids" item="studentid" open="(" separator=",">
      #{studentid}
  </foreach>
  <if test="status!=null and status.size>0">
    and  status in <foreach close=")" collection="status" item="statu" open="(" separator=",">
    #{statu}
  </foreach>
  </if>
  </select>
</mapper>